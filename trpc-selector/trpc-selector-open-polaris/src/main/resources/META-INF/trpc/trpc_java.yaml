#全局配置
global:
  namespace: Development  #环境类型，分正式环境和非正式环境两种类型
  env_name: 0f9552d0   #环境名称，非正式环境下多环境的名称
#服务端配置 
server:
  app: test #业务的应用名
  server: helloworld #业务的服务名
  local_ip: 127.0.0.1   #本地IP，容器内为容器ip，物理机或虚拟机为本机ip
  jvm_params: -Xms1024m  -Xmx1024m  -Xmn512m  -XX:+UseG1GC  #配置jvm相关参数
  service:
    - name: trpc.test.helloworld.HelloPolaris
      impls:
        - com.tencent.trpc.examples.polaris.service.HelloServiceImpl
      port: 8082
      protocol: http
      transporter: jetty
      serialization: json
      # trpc-cli -verbose -func /trpc.test.demo.Hello/SayHello -target ip://127.0.0.1:8082 -protocol http -body '{"msg":"hello,trpc-cli"}'
    - name: trpc.test.helloworld.HelloPolarisTrpc
      impls:
        - com.tencent.trpc.examples.polaris.service.HelloServiceImpl
      port: 8083
      protocol: trpc
      transporter: netty
      serialization: pb
      # trpc-cli -verbose -func /trpc.test.demo.Hello/SayHello -target ip://127.0.0.1:8083 -protocol trpc -body '{"msg":"hello,trpc-cli"}'
client:
  service:
    - name: testHttpClient   # 该name不用作北极星寻址
      interface: com.tencent.trpc.demo.api.HelloAPI
      #      naming_url: ip://127.0.0.1:8082
      # 如果上线123，可启用下面的配置，并注释上面的配置
      naming_url: polaris://trpc.test.helloworld.HelloPolaris                          #naming配置,直连 ip://ip:port, 名字服务: polaris://trpc.TestApp.TestServer.Greeter?key=value&key=value  l5://mid:cmid  cmlb://id
      protocol: http
      transporter: jetty
      serialization: json
    - name: testTrpcClient   # 该name不用作北极星寻址
      interface: com.tencent.trpc.demo.api.HelloAPI
      #      naming_url: ip://127.0.0.1:8083
      # 如果上线123，可启用下面的配置，并注释上面的配置
      naming_url: polaris://trpc.test.helloworld.HelloPolarisTrpc                          #naming配置,直连 ip://ip:port, 名字服务: polaris://trpc.TestApp.TestServer.Greeter?key=value&key=value  l5://mid:cmid  cmlb://id
      protocol: trpc
      serialization: pb
    - name: testSetRouter   # 该name不用作北极星寻址
      interface: com.tencent.trpc.demo.api.HelloAPI
      naming_url: polaris://trpc.trpc_java.trpc_java_demo.TestPolarisTRPC
      protocol: trpc
      serialization: pb
      naming_map: # 服务发现所需参数
        metadata: # 元数据路由所需参数
          internal-enable-set: Y
          internal-set-name: set.homo.public
    - name: testMetadataRouter   # 该name不用作北极星寻址
      interface: com.tencent.trpc.demo.api.HelloAPI
      naming_url: polaris://trpc.trpc_java.trpc_java_demo.TestPolarisTRPC
      protocol: trpc
      serialization: pb
      naming_map: # 服务发现所需参数
        metadata: # 元数据路由所需参数
          env: ${env_name} # 0f9552d0
    - name: testCanaryRouter   # 该name不用作北极星寻址
      interface: com.tencent.trpc.demo.api.HelloAPI
      naming_url: polaris://trpc.trpc_java.trpc_java_demo.TestPolarisTRPC
      protocol: trpc
      serialization: pb
      naming_map: # 服务发现所需参数
        metadata: # 元数据路由所需参数
          internal-canary: true
          canary: 1
    - name: testRuleRouter   # 该name不用作北极星寻址
      interface: com.tencent.trpc.demo.api.HelloAPI
      naming_url: polaris://trpc.trpc_java.trpc_java_demo.TestPolarisTRPC
      protocol: trpc
      serialization: pb
      caller_service_name: trpc.trpc_java.trpc_java_demo.TestPolarisTRPC
      request_timeout: 10000
plugins:
  registry:
    polaris: #名字注册服务的远程对象
      heartbeat_interval: 3000 #名字注册服务心跳上报间隔
      mode: 0                                      #选填，运行模式0-noagent 1-withagent
      protocol: grpc                               #选填，服务发现的rpc协议，暂时只支持grpc
      register_self: true
      service:
        - name: trpc.test.helloworld.HelloPolaris
          namespace: Development #环境类型，分正式production和非正式development两种类型
        - name: trpc.test.helloworld.HelloPolarisTrpc
          namespace: Development #环境类型，分正式production和非正式development两种类型
  selector:
    polaris:
      enable_trans_meta: true  # 使用规则路由时必须配置
      mode: 0
      # 以下的配置与polaris java sdk配置一致。
      global:
        system:
          discoverCluster:
            sameAsBuiltin: true
          healthCheckCluster:
            sameAsBuiltin: true
        serverConnector:
          # target server address
          addresses:
            - 127.0.0.1:8091
        statReporter:
          enable: true
          plugin:
            prometheus:
              port: 28082
      #描述: 主调端配置
      consumer:
        #描述: 本地服务缓存相关配置
        localCache:
          #描述: 缓存插件名
          type: inmemory
          #描述: 是否启用服务数据缓存
          serviceExpireEnable: true
          #描述: 服务过期淘汰时间
          serviceExpireTime: 24h
          #描述: 服务定期同步刷新周期
          serviceRefreshInterval: 2s
          #描述: 是否启用服务数据文件缓存
          persistEnable: true
          #描述: 服务缓存持久化目录，SDK在实例数据更新后，按照服务维度将数据持久化到磁盘
          persistDir: ./polaris/backup
          #描述: 缓存写盘失败的最大重试次数
          persistMaxWriteRetry: 1
          #描述: 缓存从磁盘读取失败的最大重试次数
          persistMaxReadRetry: 0
          #描述: 缓存读写磁盘的重试间隔
          persistRetryInterval: 500ms
        #描述: 服务路由相关配置
        serviceRouter:
          #描述: 前置路由链
          beforeChain:
            # 隔离路由
            - isolatedRouter
          #描述: 服务路由链
          chain:
            # 规则路由
            - ruleBasedRouter
            # set路由
            - setRouter
            # 就近路由
            - nearbyBasedRouter
            # 金丝雀路由
            - canaryRouter
            # 元数据路由
            - metadataRouter
          #描述: 后置路由链
          afterChain:
            # 兜底（全死全活）路由
            - recoverRouter
          #是否开启全死全活，默认开启
          enableRecoverAll: true
          #剩余节点低于某个百分比时，就全量返回，如果不填，默认0%，即全死全活
          percentOfMinInstances: 0.0
      #描述：服务路由插件的配置
      plugin:
        metadataRouter:
          #描述: 元数据路由降级策略。none(不降级), all(降级返回所有的节点), others(降级返回其他节点), custom(降级到指定metadata)
          metadataFailOverType: none
        #          failovercustometa:
        #            env: test
        nearbyBasedRouter:
          #描述: 就近路由的最小匹配级别。region(大区)、zone(区域)、campus(园区)
          matchLevel: region
          #描述: 最大匹配级别
          maxMatchLevel: all
          #描述: 强制就近
          strictNearby: false
          #描述: 全部实例不健康时是否降级其他地域
          enableDegradeByUnhealthyPercent: false
          #描述: 达到降级标准的不健康实例百分比
          unhealthyPercentToDegrade: 100
          #描述: 是否通过上报方式获取地域信息
          enableReportLocalAddress: true
      #描述:负载均衡相关配置
      loadbalancer:
        #描述: 负载均衡类型（已注册的负载均衡插件名）
        type: weightedRandom
      #描述:节点熔断相关配置
      circuitBreaker:
        #描述: 是否启用本地节点熔断功能
        enable: true
        #描述: 故障检测周期，根据周期内故障进行熔断
        checkPeriod: 1m
        #描述: 首次熔断时间，后续熔断时间=重试次数*sleepWindow
        sleepWindow: 30s
        #描述: 熔断器半开后最大允许的请求数
        requestCountAfterHalfOpen: 3
        #描述: 熔断器半开到关闭所必须的最少成功请求数
        successCountAfterHalfOpen: 3
        #描述:熔断策略，SDK会根据策略名称加载对应的熔断器插件（已注册的熔断器插件名）
        chain:
          - errorCount
          - errorRate
        #描述: 熔断插件配置
        plugin:
          #描述:基于周期连续错误数熔断策略配置
          errorCount:
            #描述: 触发连续错误熔断的阈值
            continuousErrorThreshold: 10
          #描述:基于周期错误率的熔断策略配置
          errorRate:
            #描述:触发错误率熔断的阈值百分比
            errorRateThreshold: 50
            #描述: 错误率熔断的滑窗数量
            metricNumBuckets: 5
            #描述: 触发错误率熔断的最低请求阈值
            requestVolumeThreshold: 10
      #描述:主动探测相关配置
      outlierDetection:
        #描述：何时开启主动探测。never（永不开启）,on_recover（恢复时才开启主动探测）,always（一直开启主动探测）
        when: never
        #描述：主动探测周期
        checkPeriod: 30s
        #描述：主动探测插件链
        chain:
          - http
          - tcp
          - udp